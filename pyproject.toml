[project]
name = "nonebot-plugin-treehelp"
version = "0.5.0"
description = "适用于 Nonebot2 的树形帮助插件"
authors = [{ name = "uy/sun", email = "hmy0119@gmail.com" }]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">= 3.9"
dependencies = ["nonebot2>=2.2.0"]

[project.urls]
Homepage = "https://github.com/he0119/nonebot-plugin-treehelp"
Repository = "https://github.com/he0119/nonebot-plugin-treehelp.git"
Issues = "https://github.com/he0119/nonebot-plugin-treehelp/issues"
Changelog = "https://github.com/he0119/nonebot-plugin-treehelp/blob/main/CHANGELOG.md"

[project.optional-dependencies]
alconna = ["nonebot-plugin-alconna>=0.49.0"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["nonebot_plugin_treehelp"]

[tool.hatch.build.targets.sdist]
only-include = ["nonebot_plugin_treehelp"]

[dependency-groups]
dev = [
  "nonebug>=0.4.3",
  "pytest-cov>=6.2.1",
  "pytest-xdist>=3.8.0",
  "pytest-mock>=3.14.1",
  "pytest-asyncio>=1.0.0",
  "nonebot2[fastapi,httpx]>=2.4.2",
  "nonebot-adapter-onebot>=2.4.6",
  "nonebot-adapter-console>=0.6.0",
  "nonebot-plugin-alconna>=0.58.5",
  "poethepoet>=0.36.0",
  "bump-my-version>=1.2.0",
]

[tool.uv.pip]
universal = true

[tool.poe.tasks]
test = "pytest --cov=src/python_template --cov-report xml --junitxml=./junit.xml -n auto"
bump = "bump-my-version bump"
show-bump = "bump-my-version show-bump"

[tool.pyright]
pythonVersion = "3.9"
pythonPlatform = "All"
typeCheckingMode = "standard"

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint]
select = [
  "W",   # pycodestyle warnings
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "UP",  # pyupgrade
  "C4",  # flake8-comprehensions
  "T10", # flake8-debugger
  "T20", # flake8-print
  "PYI", # flake8-pyi
  "PT",  # flake8-pytest-style
  "Q",   # flake8-quotes
  "TC",  # flake8-type-checking
  "DTZ", # flake8-datetimez
  "RUF", # Ruff-specific rules
  "I",   # isort
]
ignore = [
  "E402",   # module-import-not-at-top-of-file
  "RUF001", # ambiguous-unicode-character-string
  "RUF002", # ambiguous-unicode-character-docstring
  "RUF003", # ambiguous-unicode-character-comment
]

[tool.nonebot]
adapters = [
  { name = "OneBot V11", module_name = "nonebot.adapters.onebot.v11" },
]
plugins = ["nonebot_plugin_treehelp", "tests.plugins.tree"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "@overload",
  "except ImportError:",
]

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[tool.bumpversion]
current_version = "0.1.0"
commit = true
message = "chore(release): {new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "## [Unreleased]"
replace = "## [Unreleased]\n\n## [{new_version}] - {now:%Y-%m-%d}"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
regex = true
search = "\\[Unreleased\\]: (https://.+?)v{current_version}\\.\\.\\.HEAD"
replace = "[Unreleased]: \\1v{new_version}...HEAD\n[{new_version}]: \\1v{current_version}...v{new_version}"
